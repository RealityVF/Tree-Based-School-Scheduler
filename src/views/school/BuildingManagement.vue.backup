<template>
  <div class="building-management-container">
    <div class="page-header">
      <h2>校区管理</h2>
      <div class="header-actions">
        <el-button type="primary" @click="showAddDialog">
          <el-icon><Plus /></el-icon> {{ activeTab === 'building' ? '添加教学楼' : '添加教室' }}
        </el-button>
        <el-button type="success" @click="importDialogVisible = true">
          <el-icon><Upload /></el-icon> 批量导入
        </el-button>
      </div>
    </div>

    <el-tabs v-model="activeTab" @tab-click="handleTabClick">
      <el-tab-pane label="教学楼管理" name="building">
        <div class="search-card">
          <el-form :inline="true" :model="searchForm" class="search-form">
            <el-form-item label="名称">
              <el-input v-model="searchForm.name" placeholder="输入教学楼名称" clearable />
            </el-form-item>
            <el-form-item>
              <el-button type="primary" @click="handleSearch">
                <el-icon><Search /></el-icon> 搜索
              </el-button>
              <el-button @click="handleReset">
                <el-icon><Refresh /></el-icon> 重置
              </el-button>
            </el-form-item>
          </el-form>
        </div>

        <div class="table-card">
          <el-table
            v-loading="loading"
            :data="buildingList"
            border
            style="width: 100%"
          >
            <el-table-column prop="id" label="ID" width="180" />
            <el-table-column prop="name" label="教学楼名称" width="150" />
            <el-table-column prop="floors" label="楼层数" width="100" />
            <el-table-column prop="location" label="位置" />
            <el-table-column prop="description" label="描述" show-overflow-tooltip />
            <el-table-column label="操作" width="250" fixed="right">
              <template #default="scope">
                <el-button
                  link
                  type="primary"
                  @click="handleEdit(scope.row)"
                >
                  编辑
                </el-button>
                <el-button
                  link
                  type="danger"
                  @click="handleDelete(scope.row)"
                >
                  删除
                </el-button>
                <el-button
                  link
                  type="success"
                  @click="viewBuildingClassrooms(scope.row)"
                >
                  查看教室
                </el-button>
              </template>
            </el-table-column>
          </el-table>

          <div class="pagination-container">
            <el-pagination
              v-model:current-page="currentPage"
              v-model:page-size="pageSize"
              :total="total"
              :page-sizes="[10, 20, 50, 100]"
              layout="total, sizes, prev, pager, next, jumper"
              @size-change="handleSizeChange"
              @current-change="handleCurrentChange"
            />
          </div>
        </div>
      </el-tab-pane>

      <el-tab-pane label="教室管理" name="classroom">
        <!-- 教室管理内容将在下一步添加 -->
      </el-tab-pane>
    </el-tabs>

    <!-- 添加/编辑教学楼对话框 -->
    <el-dialog
      v-model="dialogVisible"
      :title="isEdit ? '编辑教学楼' : '添加教学楼'"
      width="500px"
    >
      <el-form
        ref="buildingFormRef"
        :model="buildingForm"
        :rules="formRules"
        label-width="100px"
      >
        <el-form-item label="名称" prop="name">
          <el-input v-model="buildingForm.name" placeholder="请输入教学楼名称" />
        </el-form-item>
        <el-form-item label="楼层数" prop="floors">
          <el-input-number v-model="buildingForm.floors" :min="1" :max="100" />
        </el-form-item>
        <el-form-item label="位置" prop="location">
          <el-input v-model="buildingForm.location" placeholder="请输入教学楼位置" />
        </el-form-item>
        <el-form-item label="描述">
          <el-input
            v-model="buildingForm.description"
            type="textarea"
            :rows="3"
            placeholder="请输入教学楼描述信息"
          />
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="dialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitForm" :loading="submitLoading">
            确定
          </el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 批量导入对话框 -->
    <el-dialog
      v-model="importDialogVisible"
      title="批量导入教学楼"
      width="500px"
    >
      <el-upload
        class="upload-demo"
        drag
        action="#"
        :auto-upload="false"
        :on-change="handleFileChange"
        :limit="1"
        accept=".xlsx,.xls,.csv"
      >
        <el-icon class="el-icon--upload"><upload-filled /></el-icon>
        <div class="el-upload__text">
          将文件拖到此处，或<em>点击上传</em>
        </div>
        <template #tip>
          <div class="el-upload__tip">
            请上传Excel或CSV格式文件，文件大小不超过5MB
          </div>
        </template>
      </el-upload>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="importDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitImport" :loading="importLoading">
            确定
          </el-button>
        </span>
      </template>
    </el-dialog>
  </div>
</template>

<script lang="ts" setup>
import { ref, reactive, onMounted, watch } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'
import { Plus, Search, Refresh, UploadFilled, Upload } from '@element-plus/icons-vue'
import type { FormInstance } from 'element-plus'
import { getBuildings, createBuilding, updateBuilding, deleteBuilding } from '@/api/school'
import { getClassrooms, createClassroom, updateClassroom, deleteClassroom } from '@/api/school'
import type { Building, Classroom } from '@/api/school'

const router = useRouter()
const route = useRoute()
const loading = ref(false)
const buildingList = ref<Building[]>([])
const total = ref(0)
const currentPage = ref(1)
const pageSize = ref(10)

// 标签页控制
const activeTab = ref('building')

// 搜索表单
const searchForm = reactive({
  name: ''
})

// 添加/编辑教学楼表单
const dialogVisible = ref(false)
const isEdit = ref(false)
const buildingFormRef = ref<FormInstance>()
const submitLoading = ref(false)
const buildingForm = reactive({
  id: '',
  name: '',
  floors: 1,
  location: '',
  description: ''
})

// 表单验证规则
const formRules = {
  name: [
    { required: true, message: '请输入教学楼名称', trigger: 'blur' },
    { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
  ],
  floors: [
    { required: true, message: '请输入楼层数', trigger: 'blur' },
    { type: 'number', min: 1, message: '楼层数必须大于0', trigger: 'blur' }
  ],
  location: [
    { required: true, message: '请输入教学楼位置', trigger: 'blur' }
  ]
}

// 导入相关
const importDialogVisible = ref(false)
const importLoading = ref(false)
const importFile = ref<File | null>(null)

// 获取教学楼列表
const fetchBuildings = async () => {
  loading.value = true
  try {
    // 这里应该根据后端实际情况调整，可能需要处理分页
    const response = await getBuildings()
    if (response.success) {
      buildingList.value = response.data
      total.value = response.data.length
    } else {
      ElMessage.error(response.message || '获取教学楼列表失败')
    }
  } catch (error) {
    console.error('获取教学楼列表失败:', error)
    ElMessage.error('获取教学楼列表失败，请稍后重试')
  } finally {
    loading.value = false
  }
}

// 搜索
const handleSearch = () => {
  // 在实际开发中，可能需要根据查询条件调用接口
  // 这里简单实现为前端过滤
  const filteredList = buildingList.value.filter(item => {
    const nameMatch = !searchForm.name || item.name.includes(searchForm.name)
    return nameMatch
  })
  buildingList.value = filteredList
}

// 重置搜索
const handleReset = () => {
  searchForm.name = ''
  fetchBuildings()
}

// 分页处理
const handleSizeChange = (val: number) => {
  pageSize.value = val
  fetchBuildings()
}

const handleCurrentChange = (val: number) => {
  currentPage.value = val
  fetchBuildings()
}

// 显示添加对话框
const showAddDialog = () => {
  isEdit.value = false
  buildingForm.id = ''
  buildingForm.name = ''
  buildingForm.floors = 1
  buildingForm.location = ''
  buildingForm.description = ''
  dialogVisible.value = true
}

// 处理编辑
const handleEdit = (row: Building) => {
  isEdit.value = true
  buildingForm.id = row.id
  buildingForm.name = row.name
  buildingForm.floors = row.floors
  buildingForm.location = row.location
  buildingForm.description = row.description || ''
  dialogVisible.value = true
}

// 处理删除
const handleDelete = async (row: Building) => {
  try {
    await ElMessageBox.confirm(
      `确定要删除教学楼 "${row.name}" 吗？删除后将无法恢复，且关联的教室也可能被删除`,
      '警告',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )

    const response = await deleteBuilding(row.id)
    if (response.success) {
      ElMessage.success('删除成功')
      fetchBuildings()
    } else {
      ElMessage.error(response.message || '删除失败')
    }
  } catch (error) {
    if (error !== 'cancel') {
      console.error('删除教学楼失败:', error)
      ElMessage.error('删除失败，请稍后重试')
    }
  }
}

// 提交表单
const submitForm = async () => {
  if (!buildingFormRef.value) return

  await buildingFormRef.value.validate(async (valid) => {
    if (valid) {
      submitLoading.value = true
      try {
        if (isEdit.value) {
          // 更新
          const updateData = {
            name: buildingForm.name,
            floors: buildingForm.floors,
            location: buildingForm.location,
            description: buildingForm.description
          }
          const response = await updateBuilding(buildingForm.id, updateData)
          if (response.success) {
            ElMessage.success('更新成功')
            dialogVisible.value = false
            fetchBuildings()
          } else {
            ElMessage.error(response.message || '更新失败')
          }
        } else {
          // 创建
          const createData = {
            name: buildingForm.name,
            floors: buildingForm.floors,
            location: buildingForm.location,
            description: buildingForm.description
          }
          const response = await createBuilding(createData)
          if (response.success) {
            ElMessage.success('创建成功')
            dialogVisible.value = false
            fetchBuildings()
          } else {
            ElMessage.error(response.message || '创建失败')
          }
        }
      } catch (error) {
        console.error(isEdit.value ? '更新教学楼失败:' : '创建教学楼失败:', error)
        ElMessage.error(isEdit.value ? '更新失败，请稍后重试' : '创建失败，请稍后重试')
      } finally {
        submitLoading.value = false
      }
    }
  })
}

// 导航到教室管理页面
const viewBuildingClassrooms = (row: Building) => {
  router.push({
    path: '/school/classroom',
    query: { buildingId: row.id, buildingName: row.name }
  })
}

// 处理文件变更
const handleFileChange = (file: { raw: File }) => {
  importFile.value = file.raw
}

// 提交导入
const submitImport = async () => {
  if (!importFile.value) {
    ElMessage.warning('请选择要导入的文件')
    return
  }

  importLoading.value = true
  try {
    // 这里应该实现批量导入逻辑
    // 由于需要后端支持，这里只是模拟
    setTimeout(() => {
      ElMessage.success('导入成功')
      importDialogVisible.value = false
      fetchBuildings()
      importLoading.value = false
    }, 1500)
  } catch (error) {
    console.error('导入教学楼失败:', error)
    ElMessage.error('导入失败，请稍后重试')
    importLoading.value = false
  }
}

// 处理标签页切换
const handleTabClick = () => {
  // 标签页切换时重置搜索表单和分页
  resetSearch()
  resetPagination()

  // 根据当前标签页加载相应数据
  if (activeTab.value === 'building') {
    fetchBuildings()
  } else {
    fetchClassrooms()
  }
}

// 组件挂载时获取教学楼列表
onMounted(() => {
  fetchBuildings()
})
</script>

<style scoped>
.building-management-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.page-header h2 {
  margin: 0;
  font-size: 24px;
  color: #333;
}

.header-actions {
  display: flex;
  gap: 10px;
}

.search-card {
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  padding: 24px;
  margin-bottom: 20px;
}

.search-form {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.table-card {
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  padding: 24px;
}

.pagination-container {
  margin-top: 20px;
  display: flex;
  justify-content: flex-end;
}
</style>
